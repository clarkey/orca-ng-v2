version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: orca-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-orca}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-orca_db}
      POSTGRES_SSLMODE: ${DB_SSLMODE:-require}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - orca_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-orca} -d ${DB_NAME:-orca_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: orca-backend
    environment:
      # Database
      DATABASE_URL: postgres://${DB_USER:-orca}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-orca_db}?sslmode=${DB_SSLMODE:-require}
      DATABASE_DRIVER: ${DATABASE_DRIVER:-postgres}
      
      # Required Security Keys - MUST be generated securely!
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      SESSION_SECRET: ${SESSION_SECRET}
      
      # Initial Admin Setup
      INITIAL_ADMIN_USERNAME: ${INITIAL_ADMIN_USERNAME:-admin}
      INITIAL_ADMIN_PASSWORD: ${INITIAL_ADMIN_PASSWORD}
      
      # Application Settings
      APP_ENV: ${APP_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - orca_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: orca-frontend
    environment:
      BACKEND_URL: http://backend:8080
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - orca_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: orca-nginx
    ports:
      - "${HTTPS_PORT:-443}:443"
      - "${HTTP_PORT:-80}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - orca_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  orca_network:
    driver: bridge

# To deploy:
# 1. Generate secure keys:
#    docker run --rm -v $(pwd):/keys alpine:latest sh -c "
#      apk add --no-cache openssl &&
#      echo 'ENCRYPTION_KEY='$(openssl rand -base64 32) > /keys/.env &&
#      echo 'SESSION_SECRET='$(openssl rand -base64 32) >> /keys/.env &&
#      echo 'INITIAL_ADMIN_PASSWORD='$(openssl rand -base64 16) >> /keys/.env &&
#      echo 'DB_PASSWORD='$(openssl rand -base64 32) >> /keys/.env
#    "
#
# 2. Review and edit .env file
#
# 3. Deploy:
#    docker-compose -f docker-compose.prod.yml up -d
#
# 4. Check logs for initial admin password if generated:
#    docker logs orca-backend | grep "generated_password"